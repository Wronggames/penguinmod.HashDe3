(function(ext) {
  // Define custom hashing block
  ext.customHash = function(input) {
    let hashedResult = '';
    for (let i = 0; i < input.length; i++) {
      const character = input.charAt(i);
      const upperCharacter = character.toUpperCase(); // Convert input character to uppercase
      switch (upperCharacter) {
        case 'A':
          hashedResult += '1';
          break;
        case 'B':
          hashedResult += 'W';
          break;
        case 'C':
          hashedResult += '#';
          break;
        case 'D':
          hashedResult += 'U';
          break;
        case 'E':
          hashedResult += 'T';
          break;
        case 'F':
          hashedResult += 'S';
          break;
        case 'G':
          hashedResult += 'R';
          break;
        case 'H':
          hashedResult += 'Q';
          break;
        case 'I':
          hashedResult += 'P';
          break;
        case 'J':
          hashedResult += 'O';
          break;
        case 'K':
          hashedResult += 'N';
          break;
        case 'L':
          hashedResult += 'M';
          break;
        case 'M':
          hashedResult += 'L';
          break;
        case 'N':
          hashedResult += '!';
          break;
        case 'O':
          hashedResult += 'J';
          break;
        case 'P':
          hashedResult += 'I';
          break;
        case 'Q':
          hashedResult += 'H';
          break;
        case 'R':
          hashedResult += 'D';
          break;
        case 'S':
          hashedResult += 'F';
          break;
        case 'T':
          hashedResult += 'R';
          break;
        case 'U':
          hashedResult += '3';
          break;
        case 'V':
          hashedResult += '{';
          break;
        case 'W':
          hashedResult += '}';
          break;
        case 'X':
          hashedResult += '4';
          break;
        case 'Y':
          hashedResult += 'Z';
          break;
        case 'Z':
          hashedResult += '3';
          break;
        default:
          hashedResult += character; // If not a letter, keep it unchanged
          break;
      }
    }
    return hashedResult;
  };

  // Define block to return hashed input to the original message
  ext.reverseHash = function(input) {
    let originalMessage = '';
    for (let i = 0; i < input.length; i++) {
      const character = input.charAt(i);
      switch (character) {
        case '1':
          originalMessage += 'A';
          break;
        case 'W':
          originalMessage += 'B';
          break;
        case '#':
          originalMessage += 'C';
          break;
        case 'U':
          originalMessage += 'D';
          break;
        case 'T':
          originalMessage += 'E';
          break;
        case 'S':
          originalMessage += 'F';
          break;
        case 'R':
          originalMessage += 'G';
          break;
        case 'Q':
          originalMessage += 'H';
          break;
        case 'P':
          originalMessage += 'I';
          break;
        case 'O':
          originalMessage += 'J';
          break;
        case 'N':
          originalMessage += 'K';
          break;
        case 'M':
          originalMessage += 'L';
          break;
        case '!':
          originalMessage += 'N';
          break;
        case 'J':
          originalMessage += 'O';
          break;
        case 'I':
          originalMessage += 'P';
          break;
        case 'H':
          originalMessage += 'Q';
          break;
        case 'D':
          originalMessage += 'R';
          break;
        case 'F':
          originalMessage += 'S';
          break;
        case 'R':
          originalMessage += 'T';
          break;
        case '3':
          originalMessage += 'U';
          break;
        case '{':
          originalMessage += 'V';
          break;
        case '}':
          originalMessage += 'W';
          break;
        case '4':
          originalMessage += 'X';
          break;
        case 'Z':
          originalMessage += 'Y';
          break;
        case '3':
          originalMessage += 'Z';
          break;
        case 'a':
          originalMessage += '1'; // Lowercase 'a' maps to '1'
          break;
        case 'b':
          originalMessage += 'W'; // Lowercase 'b' maps to 'W'
          break;
        case 'c':
          originalMessage += '#'; // Lowercase 'c' maps to '#'
          break;
        case 'd':
          originalMessage += 'U'; // Lowercase 'd' maps to 'U'
          break;
        case 'e':
          originalMessage += 'T'; // Lowercase 'e' maps to 'T'
          break;
        case 'f':
          originalMessage += 'S'; // Lowercase 'f' maps to 'S'
          break;
        case 'g':
          originalMessage += 'R'; // Lowercase 'g' maps to 'R'
          break;
        case 'h':
          originalMessage += 'Q'; // Lowercase 'h' maps to 'Q'
          break;
        case 'i':
          originalMessage += 'P'; // Lowercase 'i' maps to 'P'
          break;
        case 'j':
          originalMessage += 'O'; // Lowercase 'j' maps to 'O'
          break;
        case 'k':
          originalMessage += 'N'; // Lowercase 'k' maps to 'N'
          break;
        case 'l':
          originalMessage += 'M'; // Lowercase 'l' maps to 'M'
          break;
        case 'm':
          originalMessage += 'L'; // Lowercase 'm' maps to 'L'
          break;
        case 'n':
          originalMessage += '!'; // Lowercase 'n' maps to '!'
          break;
        case 'o':
          originalMessage += 'J'; // Lowercase 'o' maps to 'J'
          break;
        case 'p':
          originalMessage += 'I'; // Lowercase 'p' maps to 'I'
          break;
        case 'q':
          originalMessage += 'H'; // Lowercase 'q' maps to 'H'
          break;
        case 'r':
          originalMessage += 'D'; // Lowercase 'r' maps to 'D'
          break;
        case 's':
          originalMessage += 'F'; // Lowercase 's' maps to 'F'
          break;
        case 't':
          originalMessage += 'R'; // Lowercase 't' maps to 'R'
          break;
        case 'u':
          originalMessage += '3'; // Lowercase 'u' maps to '3'
          break;
        case 'v':
          originalMessage += '{'; // Lowercase 'v' maps to '{'
          break;
        case 'w':
          originalMessage += '}'; // Lowercase 'w' maps to '}'
          break;
        case 'x':
          originalMessage += '4'; // Lowercase 'x' maps to '4'
          break;
        case 'y':
          originalMessage += 'Z'; // Lowercase 'y' maps to 'Z'
          break;
        case 'z':
          originalMessage += '3'; // Lowercase 'z' maps to '3'
          break;
        default:
          originalMessage += character; // If not a hashed character, keep it unchanged
          break;
      }
    }
    return originalMessage;
  };

  // Describe your extension
  var descriptor = {
    blocks: [
      ['r', '@!6721SAY@!5216AS*1 %s', 'customHash', ''],
      ['r', 'R=@!&*@!&*@!&YSG@!&Ah %s', 'reverseHash', '']
    ],
  };

  // Register the extension
  ScratchExtensions.register('Custom Hash Extension', descriptor, ext);
})(this);
